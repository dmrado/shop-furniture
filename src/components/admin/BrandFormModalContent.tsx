// components/admin/BrandFormModalContent.tsx
'use client' // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º

import React, { useState, useEffect } from 'react'
import { createBrand, updateBrand } from '@/actions/dictionaryActions' // –í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —ç–∫—à–µ–Ω—ã

// –¢–∏–ø –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –±—Ä–µ–Ω–¥–∞
type BrandFormState = {
    id?: number
    name: string
    description: string
    isActive: boolean
}

type BrandFormModalContentProps = {
    onClose: () => void // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–∞—è –∏–∑ –æ–±–µ—Ä—Ç–∫–∏ Modal
    onSuccess: () => void // –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    initialData?: BrandFormState | null // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

const BrandFormModalContent = ({ onClose, onSuccess, initialData }: BrandFormModalContentProps) => {
    const [ name, setName ] = useState(initialData?.name || '')
    const [ description, setDescription ] = useState(initialData?.description || '')
    const [ isActive, setIsActive ] = useState(initialData?.isActive ?? true)
    const [ descriptionCharCount, setDescriptionCharCount ] = useState(initialData?.description.length || 0)

    const [ error, setError ] = useState<string | null>(null)
    const [ isLoading, setIsLoading ] = useState(false)

    useEffect(() => {
        if (initialData) {
            setName(initialData.name)
            setDescription(initialData.description)
            setIsActive(initialData.isActive ?? true)
            setDescriptionCharCount(initialData.description.length)
        } else {
            setName('')
            setDescription('')
            setIsActive(true)
            setDescriptionCharCount(0)
        }
        setError(null) // –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    }, [ initialData ])

    const handleDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        const value = e.target.value
        setDescription(value)
        setDescriptionCharCount(value.length)
    }

    const handleSubmit = async (formData: FormData) => {
        setIsLoading(true)
        setError(null)
        try {
            // FormData.append() –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–π—Ç—ã,
            // –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∫ name input, –∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
            // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, name, description –∏ isActive —É–∂–µ –∏–º–µ—é—Ç name-–∞—Ç—Ä–∏–±—É—Ç—ã –≤ JSX,
            // –ø–æ—ç—Ç–æ–º—É formData.get() –∏—Ö —Å–∞–º –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç.
            // –ù–æ isActive –ª—É—á—à–µ —è–≤–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º –≤ –±—É–ª–µ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.
            // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å helper –∏–∑ actions.

            // –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ helper parseBooleanFromFormData –≤ —ç–∫—à–µ–Ω–∞—Ö, —Ç–æ
            // isActive –≤ FormData –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 'on' –∏–ª–∏ null.
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ "true"/"false" —è–≤–Ω–æ, –∫–∞–∫ —è –ø–∏—Å–∞–ª —Ä–∞–Ω–µ–µ:
            // formData.append('isActive', isActive ? 'true' : 'false');

            if (initialData?.id) {
                formData.append('id', initialData.id.toString())
                await updateBrand(formData)
            } else {
                await createBrand(formData)
            }
            onSuccess() // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            onClose() // –ú–æ–¥–∞–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –ø–æ—Å–ª–µ onSuccess
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –≤ –º–æ–¥–∞–ª–∫–µ BrandFormModalContent:', error)
            setError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞.')
        } finally {
            setIsLoading(false)
        }
    }

    return (
        <> {/* –ó–∞–º–µ–Ω–∏–ª div –Ω–∞ React.Fragment, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è Modal */}
            <h3 className="text-xl font-bold mb-4">
                {initialData ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥'}
            </h3>
            <form action={handleSubmit} className="space-y-4">
                {initialData?.id && (
                    <input type="hidden" name="id" value={initialData.id}/>
                )}
                <div>
                    <label htmlFor="brandName" className="block text-sm font-medium text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ
                        –±—Ä–µ–Ω–¥–∞</label>
                    <input
                        type="text"
                        placeholder={'–≤–≤–µ–¥–∏—Ç–µ –æ—Ç 2-—Ö —Å–∏–º–≤–æ–ª–æ–≤'}
                        id="brandName"
                        name="name"
                        defaultValue={initialData?.name || ''}
                        required
                        minLength={2}
                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
                        disabled={isLoading}
                    />
                </div>
                <div>
                    <label htmlFor="brandDescription"
                        className="block text-sm font-medium text-gray-700">–û–ø–∏—Å–∞–Ω–∏–µ
                        <span className="ml-2 text-gray-500 text-xs">
                                ({descriptionCharCount}/255 —Å–∏–º–≤–æ–ª–æ–≤)
                        </span>
                    </label>
                    <textarea
                        rows={5}
                        placeholder={'–≤–≤–µ–¥–∏—Ç–µ –æ—Ç 2-—Ö –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤'}
                        id="brandDescription"
                        name="description"
                        defaultValue={initialData?.description || ''}
                        required
                        minLength={2}
                        maxLength={255}
                        onChange={handleDescriptionChange}
                        className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
                        disabled={isLoading}
                    />
                </div>
                <div className="mb-4 flex items-center">
                    <input
                        id="isActive"
                        type="checkbox"
                        name="isActive"
                        checked={isActive}
                        onChange={(e) => setIsActive(e.target.checked)}
                        className="mr-2 leading-tight"
                        disabled={isLoading}
                    />
                    <label htmlFor="isActive" className="text-gray-700 text-sm font-bold">
                        –ê–∫—Ç–∏–≤–µ–Ω
                    </label>
                </div>

                {error && <p className="text-red-500 text-sm mb-4">{error}</p>}

                <div className="flex justify-end gap-3">
                    <button
                        type="button"
                        onClick={() => {
                            onClose()
                            setDescriptionCharCount(0) // –°–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                        }}
                        className="button_red px-4 py-2"
                        disabled={isLoading}
                    >
                        –û—Ç–º–µ–Ω–∞ üö´
                    </button>
                    <button
                        type="submit"
                        className="button_green px-4 py-2"
                        disabled={isLoading}
                    >
                        {initialData ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥'} ‚úÖ
                    </button>
                </div>
            </form>
        </>
    )
}

export default BrandFormModalContent