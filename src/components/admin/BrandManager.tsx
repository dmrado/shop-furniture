'use client'

import React, { useState } from 'react'
import { DictionaryItem } from '@/db/types/common-types'
import {
    createBrand,
    getAllBrands,
    softDeleteBrand,
    updateBrand
} from '@/actions/dictionaryActions'
import Modal from '@/components/ui/Modal'
import { usePathname, useRouter, useSearchParams } from 'next/navigation' // –î–ª—è router.refresh()
import { PencilIcon, TrashIcon } from '@heroicons/react/24/outline'
import ReactPaginateWrapper from '@/components/site/ReactPaginateWrapper'
import Link from 'next/link'

// –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
type BrandManagementClientProps = {
    initialBrands: DictionaryItem[]
    itemsPerPage: number
    currentPage: number
    totalCount: number //  –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º—ã –±—Ä–µ–Ω–¥–∞
interface BrandFormState {
    id?: number | null
    name: string
    description: string
    isActive?: boolean
}

const BrandManager = ({
    initialBrands,
    itemsPerPage,
    currentPage,
    totalCount
}: BrandManagementClientProps) => {
    const router = useRouter()
    const path = usePathname()
    const searchParams = useSearchParams()

    const [brands, setBrands] = useState<DictionaryItem[]>(initialBrands) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
    const [showModal, setShowModal] = useState(false) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [currentBrand, setCurrentBrand] = useState<BrandFormState | null>(
        null
    ) // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è
    const [isActive, setIsActive] = useState(true)
    //–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ description
    const [descriptionCharCount, setDescriptionCharCount] = useState(0)

    // –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pageCount = Math.ceil(totalCount / itemsPerPage)

    // –î–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const [showConfirmDeleteModal, setShowConfirmDeleteModal] = useState(false)
    const [brandToDelete, setBrandToDelete] = useState<DictionaryItem | null>(
        null
    )

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ textarea
    const handleDescriptionChange = (
        e: React.ChangeEvent<HTMLTextAreaElement>
    ) => {
        setDescriptionCharCount(e.target.value.length)
    }

    const handleEditClick = (brand: DictionaryItem) => {
        const desc = brand.description || ''
        setCurrentBrand({
            id: brand.id,
            name: brand.name,
            description: desc,
            isActive: brand.isActive ?? true
        })
        setIsActive(brand.isActive ?? true)
        setDescriptionCharCount(desc.length) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        setShowModal(true)
    }

    // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    const handleAddClick = () => {
        setCurrentBrand(null)
        setIsActive(true) // –î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω
        setDescriptionCharCount(0) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        setShowModal(true)
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    const handleSubmit = async (formData: FormData) => {
        try {
            if (currentBrand?.id) {
                await updateBrand(formData) // –ï—Å–ª–∏ –µ—Å—Ç—å id, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            } else {
                await createBrand(formData) // –ò–Ω–∞—á–µ, —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ
            }
            setShowModal(false) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setDescriptionCharCount(0)
            const updatedBrands = await getAllBrands() // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –º—è–≥–∫–æ-—É–¥–∞–ª–µ–Ω–Ω—ã—Ö
            setBrands(updatedBrands) // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π—Ç
            router.refresh() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–µ—Ä–µ–∑ Server Component
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–µ–π—Ç brands, –Ω–æ refresh –ø—Ä–æ—â–µ
        } catch (error: any) {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`)
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const handleDeleteClick = (brand: DictionaryItem) => {
        setBrandToDelete(brand)
        setShowConfirmDeleteModal(true)
    }

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const handleConfirmDelete = async () => {
        if (!brandToDelete || !brandToDelete.id) {
            alert('–ë—Ä–µ–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω.')
            return
        }
        try {
            // –í—ã–∑—ã–≤–∞–µ–º Server Action –Ω–∞–ø—Ä—è–º—É—é
            await softDeleteBrand(brandToDelete.id)
            setShowConfirmDeleteModal(false) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            setBrandToDelete(null) // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
            const updatedBrands = await getAllBrands() // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
            setBrands(updatedBrands) // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π—Ç
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞:', error)
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${error.message}`)
        }
    }

    const handlePageChange = (selectedPage: { selected: number }) => {
        const newPage = selectedPage.selected + 1 // ReactPaginate 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω, –Ω–∞–º –Ω—É–∂–µ–Ω 1-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const currentSearchParams = new URLSearchParams(searchParams)
        currentSearchParams.set('page', String(newPage)) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä 'page'
        router.push(path + '?' + currentSearchParams.toString()) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—ã–π URL
    }

    // –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–∫–∏
    const cardStyle =
        'relative flex flex-col justify-between p-3 border border-gray-300 rounded-lg shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer group w-full h-44'
    // –°—Ç–∏–ª–∏ –¥–ª—è –∏–º–µ–Ω–∏ –±—Ä–µ–Ω–¥–∞
    const nameStyle =
        'text-lg font-semibold text-gray-800 group-hover:text-[#E99C28] mb-1 text-center truncate break-words'
    // –°—Ç–∏–ª–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞
    const descriptionStyle =
        'text-sm text-gray-600 overflow-hidden text-center flex-grow line-clamp-3 break-words'
    // –°—Ç–∏–ª–∏ –¥–ª—è ID –ø—Ä–∏ —Ö–æ–≤–µ—Ä–µ - –ù–ï–¢, –≠–¢–û–¢ –ë–£–î–ï–¢ –ü–†–ò–ú–ï–ù–ï–ù –ö –û–í–ï–†–õ–ï–Æ –í–ù–£–¢–†–ò!
    const idStyle =
        'absolute inset-0 flex items-center justify-center bg-gray-400 bg-opacity-75 text-white text-base font-bold opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-lg'
    // –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    const actionsContainerStyle =
        'flex flex-col sm:flex-row gap-1 mt-auto w-full opacity-0 group-hover:opacity-100 transition-opacity duration-200 pt-2'
    // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    const actionButtonStyle =
        'w-full button_blue text-xs px-2 py-1.5 justify-center'
    const deleteButtonStyle =
        'w-full button_red text-xs px-2 py-1.5 justify-center'

    return (
        <div className="p-6 bg-white rounded-lg shadow-md">
            <div className="flex flex-col sm:flex-row w-full justify-between align-center px-12 gap-2">
                <button
                    onClick={handleAddClick}
                    className="button_green mb-6 px-5 py-2"
                >
                    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥ üõ†Ô∏è
                </button>
                <Link href={'/admin/products'}>–í–µ—Ä–Ω—É—Ç—å—Å—è</Link>
            </div>

            {/*fixme –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç*/}
            {/*{pageCount > 1 && (*/}
            <div className="my-6">
                <ReactPaginateWrapper
                    pages={pageCount} // –ü–µ—Ä–µ–¥–∞–µ–º –í–´–ß–ò–°–õ–ï–ù–ù–û–ï pageCount
                    currentPage={currentPage} // –ü–µ—Ä–µ–¥–∞–µ–º currentPage, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
                    onPageChange={handlePageChange}
                />
            </div>
            {/*)}*/}

            {/* –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-2">
                {brands.length === 0 ? (
                    <p className="col-span-full text-gray-600">
                        –ë—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
                    </p>
                ) : (
                    brands.map((brand) => (
                        <div key={brand.id} className={cardStyle}>
                            <div className="relative flex flex-col items-center flex-grow">
                                <div
                                    className={
                                        idStyle.replace('rounded-lg', '') +
                                        ' rounded-t-lg'
                                    }
                                >
                                    <span className="p-2">ID: {brand.id}</span>
                                </div>

                                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                                <span className={nameStyle} title={brand.name}>
                                    {brand.name}
                                </span>
                                <span
                                    className={descriptionStyle}
                                    title={brand.description || ''}
                                >
                                    {brand.description}
                                </span>
                            </div>

                            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                            <div className={actionsContainerStyle}>
                                <button
                                    onClick={() => handleEditClick(brand)}
                                    className={actionButtonStyle}
                                >
                                    <PencilIcon className="h-4 w-4 mr-1" />
                                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                                <button
                                    onClick={() => handleDeleteClick(brand)}
                                    className={deleteButtonStyle}
                                >
                                    <TrashIcon className="h-4 w-4 mr-1" />
                                    –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    ))
                )}
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {showModal && (
                <Modal
                    onClose={() => {
                        setShowModal(false)
                        setDescriptionCharCount(0)
                    }}
                >
                    {' '}
                    {/* –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ */}
                    <h3 className="text-xl font-bold mb-4">
                        {currentBrand
                            ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–µ–Ω–¥'
                            : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥'}
                    </h3>
                    <form action={handleSubmit} className="space-y-4">
                        {currentBrand?.id && (
                            <input
                                type="hidden"
                                name="id"
                                value={currentBrand.id}
                            />
                        )}
                        <div>
                            <label
                                htmlFor="brandName"
                                className="block text-sm font-medium text-gray-700"
                            >
                                –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
                            </label>
                            <input
                                type="text"
                                placeholder={'–≤–≤–µ–¥–∏—Ç–µ –æ—Ç 2-—Ö —Å–∏–º–≤–æ–ª–æ–≤'}
                                id="brandName"
                                name="name"
                                defaultValue={currentBrand?.name || ''}
                                required
                                minLength={2}
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
                            />
                        </div>
                        <div>
                            <label
                                htmlFor="brandDescription"
                                className="block text-sm font-medium text-gray-700"
                            >
                                –û–ø–∏—Å–∞–Ω–∏–µ
                                <span className="ml-2 text-gray-500 text-xs">
                                    ({descriptionCharCount}/255 —Å–∏–º–≤–æ–ª–æ–≤)
                                </span>
                            </label>
                            <textarea
                                rows={5}
                                placeholder={'–≤–≤–µ–¥–∏—Ç–µ –æ—Ç 2-—Ö –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤'}
                                id="brandDescription"
                                name="description"
                                defaultValue={currentBrand?.description || ''}
                                required
                                minLength={2}
                                maxLength={255}
                                onChange={handleDescriptionChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-indigo-500 focus:border-indigo-500"
                            />
                        </div>
                        <div className="mb-4 flex items-center">
                            <input
                                id="isActive"
                                type="checkbox"
                                name="isActive"
                                checked={isActive}
                                onChange={(e) => setIsActive(e.target.checked)}
                                className="mr-2 leading-tight"
                                // disabled={isLoading}
                            />
                            <label
                                htmlFor="isActive"
                                className="text-gray-700 text-sm font-bold"
                            >
                                –ê–∫—Ç–∏–≤–µ–Ω
                            </label>
                        </div>
                        <div className="flex justify-end gap-3">
                            <button
                                type="button"
                                onClick={() => {
                                    setShowModal(false)
                                    setDescriptionCharCount(0)
                                }} // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ
                                className="button_red px-4 py-2"
                            >
                                –û—Ç–º–µ–Ω–∞ üö´
                            </button>
                            <button
                                type="submit"
                                className="button_green px-4 py-2"
                            >
                                {currentBrand
                                    ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
                                    : '–°–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥'}{' '}
                                ‚úÖ
                            </button>
                        </div>
                    </form>
                </Modal>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            {showConfirmDeleteModal && brandToDelete && (
                <Modal
                    onClose={() => {
                        setShowConfirmDeleteModal(false)
                        setBrandToDelete(null)
                    }}
                >
                    <h3 className="text-xl font-bold mb-4 text-red-700">
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ
                    </h3>
                    <p className="mb-6 text-gray-700">
                        –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—Ä–µ–Ω–¥ "
                        <span className="font-semibold">
                            {brandToDelete.name}
                        </span>
                        "? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. üí°
                    </p>
                    <div className="flex justify-end gap-3">
                        <button
                            type="button" // –í–∞–∂–Ω–æ: type="button", —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ä–º—É —Å–ª—É—á–∞–π–Ω–æ
                            onClick={handleConfirmDelete}
                            className="button_red px-4 py-2"
                        >
                            –î–∞, —É–¥–∞–ª–∏—Ç—å ‚ùå
                        </button>
                        <button
                            type="button"
                            onClick={() => {
                                setShowConfirmDeleteModal(false)
                                setBrandToDelete(null)
                            }}
                            className="button_green px-4 py-2 font-medium"
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                    </div>
                </Modal>
            )}
        </div>
    )
}

export default BrandManager
