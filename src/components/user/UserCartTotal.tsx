'use client'
import React, {useEffect, useState} from 'react'
import UserCartTotalAmount from '@/components/user/UserCartTotalAmount'
import {useUserCartContext} from "@/components/user/UserCartContext";

interface Product {
    id: number;
    isActive: boolean;
    articul: string;
    sku: string;
    name: string;
    description_1: string;
    description_2: string;
    length: number;
    width: number;
    height: number;
    weight: number;
    box_length: number;
    box_height: number;
    box_weight: number;
    image: string;
    old_price: number;
    new_price: number;
    primary_color: string;
    secondary_color: string;
    inStock: boolean;
}

interface CartItem {
    id: number;
    productId: number;
    quantity: number;
    userId: number;
    createdAt: string;
    updatedAt: string;
    discount: number;
    product: Product | null;
}

interface UserCartTotalProps {
    cartList: CartItem[]
}

const UserCartTotal: React.FC<UserCartTotalProps> = ({ cartList }) => {

    // +++++++++++ —Ä–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞—á–∞–ª–æ +++++++++++++++
    const total = (cartList.reduce((sum, item) => sum + (item.product?.new_price || 0) * item.quantity, 0)).toFixed(2)


    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–∫–∏–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö
    const totalDiscount = cartList.reduce((acc, item) => {
        if (!item.product) return acc
        const itemDiscount = ((item.product.old_price - item.product.new_price) * item.quantity)
        return acc + itemDiscount
    }, 0)

    const finalAmount = (total - totalDiscount).toFixed(2)

    localStorage.setItem('finalAmount', finalAmount.toString())
    // +++++++++++ —Ä–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏–µ ++++++++++++++


    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
    const calculateItemTotal = (item: CartItem): number => {
        if (!item.product) return 0
        return item.product.new_price * item.quantity
    };


    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    const totalOldPrice = cartList.reduce((sum, item) =>
        sum + (item.product?.old_price || 0) * item.quantity, 0);
    const totalNewPrice = cartList.reduce((sum, item) =>
        sum + (item.product?.new_price || 0) * item.quantity, 0);
    const totalDiscountPercent = ((totalOldPrice - totalNewPrice) / totalOldPrice * 100);


    // const [selectedItems, setSelectedItems] = useState<number[]>([])
    // const handleItemSelect = (itemId: number) => {
    //     setSelectedItems(prev =>
    //         prev.includes(itemId)
    //             ? prev.filter(id => id !== itemId)
    //             : [...prev, itemId]
    //     )
    // }
    // const selectedTotal = cartList
    //     .filter(item => selectedItems.includes(item.id))
    //     .reduce((sum, item) => sum + (item.product?.new_price || 0) * item.quantity, 0)

    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Å—É–º–º—ã –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ —Å–∫–∏–¥–∫–∏
    // const subtotal = cartList.reduce((acc, item) => acc + calculateItemTotal(item), 0)

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
    // const totalAmount = subtotal - totalDiscount

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const shareCart = async () => {
        try {
            await navigator.share({
                title: '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞',
                text: `–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${cartList.length}`,
                url: window.location.href
            })
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error)
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
        console.log('Select all:', e.target.checked)
    };

    const handleDeleteSelected = () => {
        console.log('Delete selected items')
    }

    return <>
        <div className="max-w-4xl mx-auto p-6">
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold">–ö–æ—Ä–∑–∏–Ω–∞</h2>


                {/*<div className="flex flex-col gap-4">*/}
                    {/*–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö*/}
                    {/*{selectedItems.length > 0 && (*/}
                    {/*    <div className="flex justify-between">*/}
                    {/*        <span>–í—ã–±—Ä–∞–Ω–æ –Ω–∞ —Å—É–º–º—É:</span>*/}
                    {/*        <span>{(selectedTotal)}</span>*/}
                    {/*    </div>*/}
                    {/*)}*/}
                {/*</div>*/}


                <div className="flex items-center gap-4">
                    <label className="flex items-center gap-2">
                        <input
                            type="checkbox"
                            className="rounded"
                            onChange={handleSelectAll}
                        />
                        <span title="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" role="img" aria-label="select all" className="text-xl">‚òëÔ∏è</span>

                    </label>
                    <button
                        className="px-4 py-2 text-red-600 hover:bg-red-50 rounded"
                        onClick={handleDeleteSelected}
                    >
                        <span title="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ" role="img" aria-label="delete selected" className="text-xl">üóëÔ∏è</span>
                    </button>
                    <button
                        className="px-4 py-2 hover:bg-gray-100 rounded"
                        onClick={shareCart}
                    >
                        <span title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" role="img" aria-label="share" className="text-xl">‚ÜóÔ∏è</span>
                    </button>
                </div>
            </div>

            <div className="mt-6 text-right">
                <UserCartTotalAmount finalUserCartAmount={finalAmount}/>
                <div className="flex justify-end font-bold">
                    <span>–û–±—â–∞—è —Å—É–º–º–∞:&nbsp;</span>
                    <span>{(total)}</span>
                </div>
                {totalDiscountPercent > 0 && (
                    <div className="text-sm text-red-600 font-bold">
                        - {totalDiscountPercent.toFixed()} %
                    </div>
                )}
                {totalDiscount > 0 && (
                    <div className="text-sm text-red-600 font-bold">
                        –°–∫–∏–¥–∫–∞: {totalDiscount.toFixed(2)} ‚ÇΩ
                    </div>
                )}
                <div className="text-sm text-gray-600 mt-1">
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {cartList.length}
                </div>
            </div>
        </div>
    </>
}

export default UserCartTotal